<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{CE99A5EB-84AF-4445-B689-3E1C50F071DF}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Microsoft.PackageManagement.NuGetProvider</RootNamespace>
    <AssemblyName>Microsoft.PackageManagement.NuGetProvider</AssemblyName>
    <FileAlignment>512</FileAlignment>
    <SolutionPropsPath Condition="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), solution.props)) != ''">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), solution.props))\solution.props</SolutionPropsPath>
    <TargetFrameworkProfile />
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
  </PropertyGroup>
  <Import Project="$(SolutionPropsPath)" Condition="$(SolutionPropsPath) != '' AND Exists($(SolutionPropsPath))" />
  <PropertyGroup Condition="$(SolutionPropsPath) == '' OR !Exists($(SolutionPropsPath))">
    <!-- if this is built standalone, we don't need the solution.props file. -->
    <SolutionDir Condition=" '$(SolutionDir)'=='' ">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), PackageProvider.sln))\</SolutionDir>
    <!-- Defaults to .Net 4.0 -->
    <TargetFrameworkVersion Condition="$(TargetFrameworkVersion) == '' Or $(TargetFrameworkVersion) == '*Undefined*'">v4.0</TargetFrameworkVersion>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <OutputPath>$(MSBuildThisFileDirectory)output\$(TargetFrameworkVersion.Replace(".",""))\$(Configuration)\bin\</OutputPath>
    <BaseIntermediateOutputPath>$(MSBuildThisFileDirectory)intermediate\$(TargetFrameworkVersion.Replace(".",""))\$(Configuration)\$(AssemblyName)\</BaseIntermediateOutputPath>
    <IntermediateOutputPath>$(BaseIntermediateOutputPath)</IntermediateOutputPath>
    <DocumentationFile>$(OutputPath)$(AssemblyName).XML</DocumentationFile>
    <NoWarn>1591</NoWarn>
    <RestorePackages>true</RestorePackages>
    <DefineConstants>FRAMEWORK$(TargetFrameworkVersion.Replace(".",""))</DefineConstants>
    <OutputRelativePath>output\$(TargetFrameworkVersion.Replace(".",""))\$(Configuration)\bin\</OutputRelativePath>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <DefineConstants>$(DefineConstants);DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <DocumentationFile>output\Debug\bin\Microsoft.PackageManagement.NuGetProvider.xml</DocumentationFile>
    <Prefer32Bit>false</Prefer32Bit>
    <OutputPath>output\Debug\bin\</OutputPath>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <DocumentationFile>output\v40\Release\bin\TestPackageProvider.xml</DocumentationFile>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="NugetLightConstant.cs" />
    <Compile Include="Extensions.cs" />
    <Compile Include="Package\PackageDependencySet.cs" />
    <Compile Include="Package\PackageName.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Repository\HttpClientPackageRepository.cs" />
    <Compile Include="Package\IPackage.cs" />
    <Compile Include="Package\IPackageName.cs" />
    <Compile Include="Repository\IPackageRepository.cs" />
    <Compile Include="Repository\IPackageRepositoryFactory.cs" />
    <Compile Include="Repository\LocalPackageRepository.cs" />
    <Compile Include="Package\PackageBase.cs" />
    <Compile Include="NugetLightClient.cs" />
    <Compile Include="Package\PackageDependency.cs" />
    <Compile Include="Utility\PackageUtility.cs" />
    <Compile Include="Package\PackageItem.cs" />
    <Compile Include="Repository\PackageRepositoryFactory.cs" />
    <Compile Include="PackageSource.cs" />
    <Compile Include="NugetLightRequest.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="Utility\PathUtility.cs" />
    <Compile Include="Utility\FileUtility.cs" />
    <Compile Include="Version\DependencyVersion.cs" />
    <Compile Include="Version\SemanticVersion.cs" />
    <Compile Include="Version\SemanticVersionTypeConverter.cs" />
    <Compile Include="NugetLightProvider.cs" />
    <Compile Include="Utility\XmlUtility.cs" />
    <Compile Include="Sdk\Constants.cs" />
    <Compile Include="Sdk\ErrorCategory.cs" />
    <Compile Include="Sdk\Request.cs" />
    <Compile Include="Resources\Messages.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Messages.resx</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="Resources\Messages.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Messages.Designer.cs</LastGenOutput>
      <SubType>Designer</SubType>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <None Include="provider.manifest" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="Microsoft.CSharp">
    </Reference>
    <Reference Include="System">
    </Reference>
    <Reference Include="System.ComponentModel.DataAnnotations" />
    <Reference Include="System.IO.Compression" />
    <Reference Include="System.IO.Compression.FileSystem" />
    <Reference Include="System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Management.Automation\v4.0_3.0.0.0__31bf3856ad364e35\System.Management.Automation.dll</HintPath>
    </Reference>
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Net.Http.Formatting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="WindowsBase" />
  </ItemGroup>
  <ItemGroup />
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <BeforeBuildScript>            
      if ( $env:APPVEYOR_BUILD_VERSION ) {
        $v = $env:APPVEYOR_BUILD_VERSION

        $filepath = resolve-path  "$(MSBuildThisFileDirectory)\assembly-version.cs"
        $content = (get-content -raw $filepath )
        $content = $content -replace "assembly: AssemblyVersion.*","assembly: AssemblyVersion(`"$v`")]"
        $content = $content -replace "assembly: AssemblyFileVersion.*","assembly: AssemblyFileVersion(`"$v`")]"
        set-content $filepath $content

        $filepath = resolve-path  "$(MSBuildThisFileDirectory)\provider.manifest"
        $content = (get-content -raw $filepath )
        $content = $content -replace "\s+version='.*'","    version='$v'"
        $content = $content -replace "uniqueId='.*'","uniqueId='nuget.$v'"
        $content = $content -replace "providerVersion='.*'","providerVersion='$v'"
        $content = $content -replace "href='.*'","href='https://oneget.org/Microsoft.PackageManagement.NuGetProvider-$v.dll'"
        set-content $filepath $content
      }      

      # unregister any previously compiled assembly
      mkdir hkcu:software\Microsoft\PackageManagement -ea silentlycontinue
      Set-ItemProperty -Path hkcu:software\Microsoft\PackageManagement -Name NuGet -Value $null
    </BeforeBuildScript>
    <AfterBuildScript><![CDATA[
      # Find the manifest tool, sometimes it's not in the PATH
      $MTEXE = ((Get-ItemProperty -Path HKCU:\Software\PackageManagement\Tools\MT.EXE -Name Path -ea 0).Path)

      if( -not $MTEXE ) { 
          $MTEXE = ((dir ${env:ProgramFiles(x86)} -recurse -ea 0|  where -property name -eq mt.exe | select -first 1 ).FullName) 
          $null = mkdir -Path HKCU:\Software\PackageManagement\Tools\MT.EXE -Force 
          $null = New-ItemProperty -Path HKCU:\Software\PackageManagement\Tools\MT.EXE -Name Path -Value $MTEXE -force
      }

      # get the version of the file we just built
      $file = resolve-path "$(TargetDir)Microsoft.PackageManagement.NuGetProvider.dll" 

      $version = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($file).fileversion

      # update the manifest to the right version.
      $manifestfile = resolve-path  "$(MSBuildThisFileDirectory)\provider.manifest"
      $newver = "version='$version'"

      "$file and $version and $manifestfile and $(TargetPath)" > C:\fileandversion.txt 

      $newContent = (get-content -raw $manifestfile ) -replace "version='.*'",$newver
      $newContent = $newContent -replace "providerversion","providerVersion"
      $newContent = $newContent.Trim();
      set-content $manifestfile $newcontent

      # Run the manifest tool to add the Swidtag Manifest onto the assembly
      # (this allows oneget to use it as a provider!)
      & "$MTEXE" -manifest "$manifestfile" -outputresource:"$(TargetPath)";#101
    ]]></AfterBuildScript>
  </PropertyGroup>
  <Target Name="BeforeBuild">
    <PowerShell ScriptBlock="$(BeforeBuildScript)" />
  </Target>
  <Target Name="AfterBuild">
    <PowerShell ScriptBlock="$(AfterBuildScript)">
      <Output PropertyName="outputFile" TaskParameter="Outputs" />
    </PowerShell>
  </Target>
  <UsingTask TaskName="PowerShell" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <ScriptBlock ParameterType="System.String" Required="true" />
      <Inputs ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
      <Outputs ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Management.Automation" />
      <Using Namespace="System" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Management.Automation" />
      <Using Namespace="System.Management.Automation.Runspaces" />
      <Using Namespace="System.Text" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs"><![CDATA[
        var ps = System.Management.Automation.PowerShell.Create();
        ps.AddScript( ScriptBlock );
        List<ITaskItem> outs = new List<ITaskItem>();
        
        foreach( var i in ((IEnumerable<object>)ps.Invoke((Inputs ?? new ITaskItem[0]).Where( each => each != null ).Select( each => each.ToString() ))).Where( each => each != null ).Select( each => new TaskItem( each.ToString() )) ) { 
          outs.Add( i );
          Console.WriteLine( i.ToString() ); 
        }
        
        Outputs = outs.ToArray();
      ]]></Code>
    </Task>
  </UsingTask>
</Project>